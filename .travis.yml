language: cpp
dist: bionic
os:
- linux
- osx
env:
  matrix:
  - TRAVIS_NODE_VERSION="8"
  - TRAVIS_NODE_VERSION="9"
  - TRAVIS_NODE_VERSION="10"
  - TRAVIS_NODE_VERSION="11"
  - TRAVIS_NODE_VERSION="12"
  - TRAVIS_NODE_VERSION="13"
  - TRAVIS_NODE_VERSION="14"

matrix:
  exclude:
  - os: osx
    env: TRAVIS_NODE_VERSION="6"
  - os: osx
    env: TRAVIS_NODE_VERSION="6" ARCH="x86"
  - os: osx
    env: TRAVIS_NODE_VERSION="7"
  - os: osx
    env: TRAVIS_NODE_VERSION="8"
  - os: osx
    env: TRAVIS_NODE_VERSION="9"
  allow_failures:
  - os: osx
addons:
  apt:
    sources:
      - sourceline: 'ppa:ubuntu-toolchain-r/test'
      - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
        key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
    packages:
    - g++
    - libtbb2
    - libtbb-dev
    update: true
  homebrew:
    packages:
      - tbb
      - freetype
      - opencascade
    update: true

before_install:
- >
  if [[ $TRAVIS_OS_NAME == "linux" ]]; then
    cat /etc/apt/sources.list
    sudo add-apt-repository universe
    sudo add-apt-repository multiverse
    sudo apt-add-repository -y ppa:freecad-maintainers/freecad-daily
    sudo apt-get update -qq
    sudo apt-get install -y --no-install-recommends libocct-data-exchange-dev
  fi

# reinstall latest nvm
- rm -rf ~/.nvm && git clone https://github.com/creationix/nvm.git ~/.nvm && (cd ~/.nvm && git checkout `git describe --abbrev=0 --tags`) && source ~/.nvm/nvm.sh
- nvm install $TRAVIS_NODE_VERSION
- PATH=$PATH:`pwd`/node_modules/.bin
- BASE_URL=$(node -p "'https://nodejs.org/dist/' + process.version")
- X86_FILE=$(node -p "'node-' + process.version + '-' + process.platform + '-x86'")
# download node if testing x86 architecture
- >
  if [[ "$ARCH" == "x86" ]]; then
    wget -q $BASE_URL/$X86_FILE.tar.gz
    tar -xf $X86_FILE.tar.gz
    export PATH=$X86_FILE/bin:$PATH
    ls $X86_FILE/bin
    echo " PATH =" $PATH
  fi;
  true;

# print versions
- uname -a
- file `which node`
- node --version
- node -p 'process.platform + "@" + process.arch'
- npm --version

# use g++ on linux
- if [[ $TRAVIS_OS_NAME == "linux" ]]; then export CXX=g++; fi
- $CXX --version
- npm install -g node-pre-gyp-github node-pre-gyp

# compile Node-OCC
- bash ./prepare_node.sh

git:
  submodules: false
install:
- npm install --build-from-source

script:
- >
  if [[ -z $TRAVIS_ELECTRON_VERSION ]]; then
  #  export LD_LIBRARY_PATH=`pwd`/occt-7.4.0/lib
  #  export DYLD_LIBRARY_PATH=`pwd`/occt-7.4.0/lib
    node ./
    npm test
  else
    electron test_electron
    electron_mocha test
  fi;
  true;

# if publishing, do it
# Figure out if we should publish
- PUBLISH_BINARY=true
# If we are building a tag then we need to publish a new binary package
- if [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then PUBLISH_BINARY=true; fi;
# or if we put the string [publish binary] in the commit message
- if test "${COMMIT_MESSAGE#*'[publish binary]'}" != "$COMMIT_MESSAGE"; then PUBLISH_BINARY=true; fi;
- if [[ $PUBLISH_BINARY == true ]]; then npx node-pre-gyp package; fi;
- if [[ $PUBLISH_BINARY == true ]]; then npx node-pre-gyp-github publish --release; fi;

# cleanup
- node-pre-gyp clean

cache:
  directories:
  - build_oce
